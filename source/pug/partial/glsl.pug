.
  <script id="vertexShader" type="x-shader/x-vertex">
        varying vec2 vUv;
      
        void main() {
          vUv = uv;
          vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
          gl_Position = projectionMatrix * mvPosition;
        }
      </script>
  <script id="fragmentShader" type="x-shader/x-fragment">
    uniform float time;
    uniform vec2 resolution;

    uniform sampler2D texture;

    varying vec2 vUv;

    float random (in vec2 st) { 
      return fract(sin(dot(st.xy,
                           vec2(12.9898,78.233))) 
                  * 43758.5453123);
    }

    // The MIT License
    // Copyright Â© 2013 Inigo Quilez
    float n(vec2 st) {
      vec2 i = floor(st);
      vec2 f = fract(st);
      vec2 u = f*f*(3.0-2.0*f);
      return mix( mix( random( i + vec2(0.0,0.0) ), 
                       random( i + vec2(1.0,0.0) ), u.x),
                  mix( random( i + vec2(0.0,1.0) ), 
                       random( i + vec2(1.0,1.0) ), u.x), u.y);
    }

    void main( void ) {
      float t = time;
      
      vec3 p = vec3(gl_FragCoord * 6. )  / min(resolution.x, resolution.y);
      for(float i = 0.; i < 5.; i++) {
        p = abs(p*p - n(vec2(p+i-t))) / dot(p, p) - n(vec2(p-i/t*p*.0015)) + p + n(vec2(-p*i+t*i));
        p.z *= n(p.xy-t);p.z /= n(p.yy);
      }
      

      gl_FragColor = vec4( vec3( p*.1 ), 1 );

    }
  </script>